{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red10\green77\blue204;
}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c1176\c40000\c83922;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat6\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww20320\viewh12940\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa320\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
Polymorphism\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls1\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
What does the\'a0
\i\b word
\i0\b0 \'a0'polymorphism' mean?\uc0\u8232 \cb3 Many forms. We can treat an instance of a class as if it is also another class/type at the same time, using interfaces and abstract classes.\cb1 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
What does it mean when we apply polymorphism to OO design? Give a simple Java example.\uc0\u8232 Things can inherit behaviour from other classes.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
What can we use to implement polymorphism in Java?\uc0\u8232 \cb3 using both abstract classes and interfaces. \
\ls1\ilvl0\cb1 \kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
How many 'forms' can an object take when using polymorphism?\uc0\u8232 Unsure\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5.	}\expnd0\expndtw0\kerning0
Give an example of when you could use polymorphism.\uc0\u8232 to share behaviour between related classes. An apple and an orange will share behaviours inherited from a parent \'93Fruit\'94 class.\
\pard\pardeftab720\sl480\partightenfactor0

\b\fs48 \cf4 \
\pard\pardeftab720\sl600\sa320\partightenfactor0
\cf2 Composition\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa320\partightenfactor0
\ls2\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	6.	}\expnd0\expndtw0\kerning0
What do we mean by 'composition' in reference to object-oriented programming?\uc0\u8232 \cb3 	Composition is when objects are composed from other objects, smaller building blocks of a larger thing. for example, Cake is composed of flour, eggs, sugar and butter. It is concerned with what a thing has in order to be able to behave in a particular way.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7.	}\expnd0\expndtw0\kerning0
When would you use composition? Provide a simple example in Java.\uc0\u8232 When I need to build an object make out of many objects, i.e. if I was building a cake program.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8.	}\expnd0\expndtw0\kerning0
What is/are the advantage(s) of using composition?\uc0\u8232 \cb3 Can change behaviours as and when they are needed\
\ls2\ilvl0\cb1 \kerning1\expnd0\expndtw0 {\listtext	9.	}\expnd0\expndtw0\kerning0
What happens to the behaviours when the object composed of them is destroyed?\uc0\u8232 Unsure, the behaviours will hang about not doing much in whatever class they were written in, unless that is destroyed too. \
}